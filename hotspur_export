#!/eppec/storage/sw/cky-tools/site/bin/python
from sqlitedict import SqliteDict
import pystar2
import numpy as np
# import modules used here -- sys is a very standard one
import sys, argparse, logging, os
import json
from pathlib import Path
import shutil
import subprocess

def load(path):
    return list(pystar2.load(path)[''].values())[0]

def save(particles, orig, path):
    keys = orig.dtype.names
    pystar2.save( { '': {keys: particles } }, path)

def save_star(keypoints, path):
    with open(path, 'w') as dst:
        dst.write('''
data_

loop_
_rlnCoordinateX #1
_rlnCoordinateY #2
_rlnAnglePsi #3
_rlnClassNumber #4
_rlnAutopickFigureOfMerit #5
''')
        for keypoint in keypoints:
            psi = 0.0
            cls = 1
            dst.write('%.6f %.6f %.6f %d %.6f\n' % (keypoint[0][1], keypoint[0][0], psi, cls, keypoint[1]))

def check_directory(args):
    if not os.path.isfile("data.json"):
        logging.error("This does not seem like /hotspur/scratch project folder")
        sys.exit()
    with open("data.json","r") as fp:
        data = json.load(fp)
    if args.set =="all" and args.type == "micrographs":
        return((data,{}))
    if not os.path.isfile("annotation.db"): 
        logging.error("No annotations were found, I can only export all micrographs")
        sys.exit()
    mydict = SqliteDict("annotation.db")
    return((data,mydict))

def ensure_dir(curr_dir,dest_dir):
    user = Path(curr_dir).parts[-2]
    dataset = Path(curr_dir).parts[-1]
    final_directory = os.path.join(dest_dir,user,dataset)

    os.makedirs(final_directory,exist_ok=True)

    return(final_directory)

def export_particles(data,annotation,micrographs_list,name,location):
    if "idogpicker_global" not in annotation:
        logging.error("Not iDoGPicker defaults found")
    size = annotation["idogpicker_global"]["size"]
    ranges = annotation["idogpicker_global"]["threshold"]
    for micrograph in micrographs_list:
        if "idogpicker" not in data[micrograph] or not os.path.isfile(data[micrograph]["idogpicker"]["idogpicker_filename"]):
            continue
        with open(data[micrograph]["idogpicker"]["idogpicker_filename"],"r") as fp:
            idogpicker_data = json.load(fp)
        chosen_picks = []
        for pick in idogpicker_data[size]:
            if float(pick[1]) > ranges['low'] and float(pick[1]) < ranges['high']:
                chosen_picks.append(((float(pick[0][0]),float(pick[0][1])),float(pick[1])))
        filename = os.path.join(location,micrograph+"_mc_DW_picks_"+name+".star")
        os.makedirs(os.path.split(filename)[0],exist_ok=True)
        logging.debug("Exporting %i picks to %s" % (len(chosen_picks),filename))
        save_star(chosen_picks,filename)

def copy_micrographs(micrographs_list,location):
    copied = 0 
    for micrograph in micrographs_list:
        micrograph += "_mc_DW.mrc"
        dest_path = os.path.join(location,micrograph)
        os.makedirs(os.path.split(dest_path)[0],exist_ok=True)
        if not os.path.exists(dest_path):
            logging.debug("Copying %s to %s" % (micrograph,dest_path))
            shutil.copy2(micrograph,dest_path)
            copied += 1
    logging.info("Copied %i micrographs" % (copied))

def export_micrographs(data,annotation,micrograph_set,name,location):
    list_micrographs = [ (k,v["Gctf"]["ctf_star_filename"]) for k,v in data.items() if "Gctf" in v and os.path.isfile(v["Gctf"]["ctf_star_filename"]) ]
    list_export = []
    star_data = []
    star_data_list=[]
    if micrograph_set == "all":
        list_export = list_micrographs
    elif micrograph_set == "good":
        for (key, v) in list_micrographs:
            if key in annotation and "tag" in annotation[key] and annotation[key]["tag"] == "good":
                list_export.append((key, v))
    elif micrograph_set == "notbad":
        for (key, v) in list_micrographs:
            if key not in annotation or "tag" not in annotation[key] or annotation[key]["tag"] != "bad":
                list_export.append((key, v))


    for (key, starfile) in list_export:
        if not star_data:
            star_data = load(starfile)
            
            star_data_list.append(star_data[0])
        else:
            star_data_list.append(load(starfile)[0])

    filename = os.path.join(location,"micrographs_"+name+".star")
    logging.info("Exporting %i microgaphs as %s" % (len(list_export), filename))
    save(star_data_list, star_data, filename)
    return(([x[0] for x in list_export], filename))

def extract_particles(micrographs_starfile,location,radius,name,bin_list,pad):
    subprocess.run("module load relion", shell=True)
    os.chdir(location)
    for binning in bin_list:
        size = radius * 2 + pad
        bin_size = int(size/binning)
        if (bin_size % 2) == 1:
            bin_size += 1
        command = "relion_preprocess --i %s --coord_dir ./ --coord_suffix _picks_%s.star --part_star particles_%s_bin%i.star --extract  --extract_size %i --norm --bg_radius %i --invert_contrast --scale %i" % (
            micrographs_starfile, name, name, binning, size, radius, bin_size
        )
        logging.info("Running following command for extraction: %s"%(command))
        subprocess.run(command, shell=True)
# Gather our code in a main() function
def main(args, loglevel):
    logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
  
  # TODO Replace this with your actual code.
    (data, annotation) = check_directory(args)
    final_location = ensure_dir(os.getcwd(),args.location)
    (micrographs_list, micrographs_starfile) = export_micrographs(data,annotation,args.set,args.name,final_location)
    if args.type == "particles":
        export_particles(data,annotation,micrographs_list,args.name,final_location)
    
    if not args.nocopy:
        copy_micrographs(micrographs_list, final_location)

    if args.extract:
        if not args.type == "particles":
            logging.error("Can't extract particles without export picks")
        else:
            extract_particles(micrographs_starfile,final_location,int(int(annotation["idogpicker_global"]["size"])/2),args.name,args.bin,args.padparticle)


 
# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
    parser = argparse.ArgumentParser( 
                                        description = "This tool exports micrographs or particles from hotspur. Use in /hotspur/scratch/<user>/<dataset>",
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                         )
      # TODO Specify your real parameters here.
    parser.add_argument(
                          "--set",
                          help = "Which set of micrographs to export. Default = notbad",
                          choices = ["all","good","notbad"],
                          default = "notbad"
                          )
    parser.add_argument(
                          "--type",
                          help = "What to export: Micrographs or particles. Default = micrographs",
                          choices = ["micrographs","particles"],
                          default = "micrographs"
                          )

    parser.add_argument(
                          "--particles",
                          help = "Which particleset to export",
                          choices = ["idogpicker","manual"],
                          default = "idogpicker"
                          )
    parser.add_argument(
                          "--location",
                          help = "Where should the exported files be saved",
                          default = "/goliath/processing/Gouaux/"
                          )
    parser.add_argument(
                          "--name",
                          help = "Name for the exported data",
                          required=True
                          )
    parser.add_argument(
                          "--nocopy",
                          help = "Do not copy motioncorrected micrographs to export location",
                          action="store_true")
    parser.add_argument(
                          "-v",
                          "--verbose",
                          help="increase output verbosity",
                          action="store_true")
    parser.add_argument(
                          "--extract",
                          help = "Extract particles accroding to exported picks",
                          action="store_true")
    parser.add_argument(
                          "--padparticle",
                          help = "How many pixels to add to pick radius for extraction",
                          type=int,
                          default=50
    )
    parser.add_argument(
                          "--bin",
                          help= "Which bin levels to use for extraction",
                          type=int,
                          nargs = '*',
                          default = [1,4]
    )
    
    args = parser.parse_args()
      
      # Setup logging
    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO
      
    main(args, loglevel)